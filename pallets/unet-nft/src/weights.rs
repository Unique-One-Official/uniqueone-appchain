// //! Autogenerated weights for unet_nft
// //!
// //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
// //! DATE: 2022-10-03, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
// //! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024
//
// // Executed Command:
// // target/release/uniqueone-appchain
// // benchmark
// // --chain=dev
// // --execution=wasm
// // --wasm-execution=compiled
// // --pallet=unet_nft
// // --extrinsic=*
// // --steps=20
// // --repeat=10
// // --heap-pages=4096
// // --template=./.maintain/pallet-weight-template.hbs
// // --output=./pallets/unet-nft/src/weights.rs
//
// #![cfg_attr(rustfmt, rustfmt_skip)]
// #![allow(unused_parens)]
// #![allow(unused_imports)]
//
// use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
// use sp_std::marker::PhantomData;
//
// /// Weight functions needed for unet_nft.
// pub trait WeightInfo {	fn create_class() -> Weight;}
//
// /// Weights for unet_nft using the Substrate node and recommended hardware.
// pub struct SubstrateWeight<T>(PhantomData<T>);
// impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
// // Storage: UnetConf IsWhiteListActivated (r:1 w:0)
// // Storage: UnetConf AccountWhitelist (r:1 w:0)
// 	fn create_class() -> Weight {
// 		6_000_000_u64
// 			.saturating_add(T::DbWeight::get().reads(2_u64))
// 	}
// }
//
// // For backwards compatibility and tests
// impl WeightInfo for () {
// // Storage: UnetConf IsWhiteListActivated (r:1 w:0)
// // Storage: UnetConf AccountWhitelist (r:1 w:0)
// 	fn create_class() -> Weight {
// 		6_000_000_u64
// 			.saturating_add(RocksDbWeight::get().reads(2_u64))
// 	}
// }
