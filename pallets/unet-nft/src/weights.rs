//! Autogenerated weights for unet_nft
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-12, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/uniqueone-appchain
// benchmark
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=unet_nft
// --extrinsic=*
// --steps=20
// --repeat=10
// --heap-pages=4096
// --template=./.maintain/pallet-weight-template.hbs
// --output=./pallets/unet-nft/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for unet_nft.
pub trait WeightInfo {
	fn create_class() -> Weight;
	fn proxy_mint() -> Weight;
	fn transfer(c: u32, ) -> Weight;
	fn burn() -> Weight;
	fn update_token_royalty() -> Weight;
	fn update_token_royalty_beneficiary() -> Weight;
}

/// Weights for unet_nft using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>)
;impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: UnetConf IsWhiteListActivated (r:1 w:0)
	// Storage: UnetConf AccountWhitelist (r:1 w:0)
	// Storage: UnetConf RoyaltiesRate (r:1 w:0)
	// Storage: OrmlNFT NextClassId (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Proxy Proxies (r:1 w:1)
	// Storage: UnetConf Categories (r:2 w:2)
	// Storage: OrmlNFT Classes (r:0 w:1)
	fn create_class() -> Weight {
		95_000_000_u64
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	// Storage: OrmlNFT Classes (r:1 w:1)
	// Storage: Proxy Proxies (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: UnetConf IsWhiteListActivated (r:1 w:0)
	// Storage: UnetConf AccountWhitelist (r:1 w:0)
	// Storage: UnetConf RoyaltiesRate (r:1 w:0)
	// Storage: OrmlNFT NextTokenId (r:1 w:1)
	// Storage: OrmlNFT Tokens (r:0 w:1)
	// Storage: OrmlNFT OwnersByToken (r:0 w:1)
	// Storage: OrmlNFT TokensByOwner (r:0 w:1)
	fn proxy_mint() -> Weight {
		78_000_000_u64
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	// Storage: OrmlNFT Classes (r:1 w:0)	// Storage: OrmlNFT TokensByOwner (r:2 w:2)
	// Storage: OrmlNFT OwnersByToken (r:0 w:2)
	fn transfer(c: u32, ) -> Weight {
		0_u64			// Standard Error: 109_000
			.saturating_add((22_088_000_u64).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(c as Weight)))
	}
	// Storage: OrmlNFT Classes (r:1 w:1)
	// Storage: OrmlNFT TokensByOwner (r:1 w:1)
	// Storage: OrmlNFT Tokens (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: OrmlNFT OwnersByToken (r:0 w:1)
	fn burn() -> Weight {
		65_000_000_u64
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: OrmlNFT Tokens (r:1 w:1)
	// Storage: OrmlNFT TokensByOwner (r:1 w:0)
	fn update_token_royalty() -> Weight {
		12_000_000_u64
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: OrmlNFT Tokens (r:1 w:1)
	fn update_token_royalty_beneficiary() -> Weight {
		7_000_000_u64
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: UnetConf IsWhiteListActivated (r:1 w:0)
	// Storage: UnetConf AccountWhitelist (r:1 w:0)
	// Storage: UnetConf RoyaltiesRate (r:1 w:0)
	// Storage: OrmlNFT NextClassId (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Proxy Proxies (r:1 w:1)
	// Storage: UnetConf Categories (r:2 w:2)
	// Storage: OrmlNFT Classes (r:0 w:1)
	fn create_class() -> Weight {
		95_000_000_u64
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	// Storage: OrmlNFT Classes (r:1 w:1)
	// Storage: Proxy Proxies (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: UnetConf IsWhiteListActivated (r:1 w:0)
	// Storage: UnetConf AccountWhitelist (r:1 w:0)
	// Storage: UnetConf RoyaltiesRate (r:1 w:0)
	// Storage: OrmlNFT NextTokenId (r:1 w:1)
	// Storage: OrmlNFT Tokens (r:0 w:1)
	// Storage: OrmlNFT OwnersByToken (r:0 w:1)
	// Storage: OrmlNFT TokensByOwner (r:0 w:1)
	fn proxy_mint() -> Weight {
			78_000_000_u64
				.saturating_add(RocksDbWeight::get().reads(8_u64))
				.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	// Storage: OrmlNFT Classes (r:1 w:0)
	// Storage: OrmlNFT TokensByOwner (r:2 w:2)
	// Storage: OrmlNFT OwnersByToken (r:0 w:2)
	fn transfer(c: u32, ) -> Weight {
		0_u64			// Standard Error: 109_000
			.saturating_add((22_088_000_u64).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c as Weight)))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(c as Weight)))
	}
	// Storage: OrmlNFT Classes (r:1 w:1)
	// Storage: OrmlNFT TokensByOwner (r:1 w:1)
	// Storage: OrmlNFT Tokens (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: OrmlNFT OwnersByToken (r:0 w:1)
	fn burn() -> Weight {
		65_000_000_u64
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	// Storage: OrmlNFT Tokens (r:1 w:1)
	// Storage: OrmlNFT TokensByOwner (r:1 w:0)
	fn update_token_royalty() -> Weight {
		12_000_000_u64
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: OrmlNFT Tokens (r:1 w:1)
	fn update_token_royalty_beneficiary() -> Weight {
		7_000_000_u64
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
