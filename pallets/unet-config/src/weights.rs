//! Autogenerated weights for unet_config
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-05, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/uniqueone-appchain
// benchmark
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=unet_config
// --extrinsic=*
// --steps=20
// --repeat=10
// --heap-pages=4096
// --template=./.maintain/pallet-weight-template.hbs
// --output=./pallets/unet-config/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for unet_config.
pub trait WeightInfo {
	fn add_whitelist() -> Weight;
	fn remove_whitelist() -> Weight;
	fn create_category() -> Weight;
	fn update_category() -> Weight;
	fn update_auction_close_delay() -> Weight;
	fn en_disable_whitelist() -> Weight;
}

/// Weights for unet_config using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: UnetConf AccountWhitelist (r:0 w:1)
	fn add_whitelist() -> Weight {
		13_000_000_u64
			.saturating_add(T::DbWeight::get().writes(1_u64))	}
	// Storage: UnetConf AccountWhitelist (r:0 w:1)
	fn remove_whitelist() -> Weight {
		13_000_000_u64
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: UnetConf NextId (r:1 w:1)
	// Storage: UnetConf Categories (r:0 w:1)
	fn create_category() -> Weight {
		16_000_000_u64
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: UnetConf Categories (r:1 w:1)
	fn update_category() -> Weight {
		16_000_000_u64
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: UnetConf AuctionCloseDelay (r:0 w:1)
	fn update_auction_close_delay() -> Weight {
		1_000_000_u64
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: UnetConf IsWhiteListActivated (r:1 w:1)
	fn en_disable_whitelist() -> Weight {
		4_000_000_u64
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: UnetConf AccountWhitelist (r:0 w:1)
	fn add_whitelist() -> Weight {
		13_000_000_u64
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: UnetConf AccountWhitelist (r:0 w:1)
	fn remove_whitelist() -> Weight {
		13_000_000_u64
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: UnetConf NextId (r:1 w:1)
	// Storage: UnetConf Categories (r:0 w:1)
	fn create_category() -> Weight {
		16_000_000_u64
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: UnetConf Categories (r:1 w:1)
	fn update_category() -> Weight {
		16_000_000_u64
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: UnetConf AuctionCloseDelay (r:0 w:1)
	fn update_auction_close_delay() -> Weight {
		1_000_000_u64
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: UnetConf IsWhiteListActivated (r:1 w:1)
	fn en_disable_whitelist() -> Weight {
		4_000_000_u64
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
