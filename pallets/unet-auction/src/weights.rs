//! Autogenerated weights for unet_auction
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-10, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/uniqueone-appchain
// benchmark
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=unet_auction
// --extrinsic=*
// --steps=20
// --repeat=10
// --heap-pages=4096
// --template=./.maintain/pallet-weight-template.hbs
// --output=./pallets/unet-auction/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for unet_auction.
pub trait WeightInfo {
	fn submit_dutch_auction(c: u32, ) -> Weight;
	fn submit_british_auction(c: u32, ) -> Weight;
	fn bid_dutch_auction() -> Weight;
	fn bid_british_auction() -> Weight;
	fn redeem_dutch_auction() -> Weight;
	fn redeem_british_auction() -> Weight;
	fn remove_dutch_auction() -> Weight;
	fn remove_british_auction() -> Weight;
}

/// Weights for unet_auction using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: UnetConf MaxCommissionRewardRate (r:1 w:0)
	// Storage: UnetConf MinOrderDeposit (r:1 w:0)
	// Storage: OrmlNFT Tokens (r:1 w:0)
	// Storage: OrmlNFT TokensByOwner (r:1 w:1)
	// Storage: UnetConf NextId (r:1 w:1)
	// Storage: UnetAuction DutchAuctions (r:0 w:1)
	// Storage: UnetAuction DutchAuctionBids (r:0 w:1)
	fn submit_dutch_auction(c: u32, ) -> Weight {
		(Weight::from_ref_time(33_399_000_u64 as u64))			// Standard Error: 68_000
			.saturating_add((Weight::from_ref_time(10_193_000_u64 as u64)).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c as u64)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c as u64)))
	}
	// Storage: UnetConf MaxCommissionRewardRate (r:1 w:0)
	// Storage: UnetConf MinOrderDeposit (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: OrmlNFT Tokens (r:1 w:0)
	// Storage: OrmlNFT TokensByOwner (r:1 w:1)
	// Storage: UnetConf NextId (r:1 w:1)
	// Storage: UnetAuction BritishAuctions (r:0 w:1)
	// Storage: UnetAuction BritishAuctionBids (r:0 w:1)
	fn submit_british_auction(c: u32, ) -> Weight {
		(Weight::from_ref_time(30_629_000_u64 as u64))			// Standard Error: 62_000
			.saturating_add((Weight::from_ref_time(10_074_000_u64)).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c as u64)))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c as u64)))
	}
	// Storage: UnetAuction DutchAuctions (r:1 w:0)
	// Storage: UnetAuction DutchAuctionBids (r:1 w:1)
	fn bid_dutch_auction() -> Weight {
		(Weight::from_ref_time(33_000_000_u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: UnetAuction BritishAuctions (r:1 w:0)
	// Storage: UnetAuction BritishAuctionBids (r:1 w:1)
	fn bid_british_auction() -> Weight {
		(Weight::from_ref_time(33_000_000_u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: UnetAuction DutchAuctionBids (r:1 w:1)
	// Storage: UnetAuction DutchAuctions (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: OrmlNFT TokensByOwner (r:2 w:2)
	// Storage: UnetConf AuctionCloseDelay (r:1 w:0)
	// Storage: OrmlNFT Tokens (r:1 w:0)
	// Storage: UnetConf PlatformFeeRate (r:1 w:0)
	// Storage: OrmlNFT Classes (r:1 w:0)
	// Storage: OrmlNFT OwnersByToken (r:0 w:1)
	fn redeem_dutch_auction() -> Weight {
		(Weight::from_ref_time(115_000_000_u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	// Storage: UnetAuction BritishAuctionBids (r:1 w:1)
	// Storage: UnetAuction BritishAuctions (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: OrmlNFT TokensByOwner (r:2 w:2)
	// Storage: OrmlNFT Tokens (r:1 w:0)
	// Storage: UnetConf PlatformFeeRate (r:1 w:0)
	// Storage: OrmlNFT Classes (r:1 w:0)
	// Storage: OrmlNFT OwnersByToken (r:0 w:1)
	fn redeem_british_auction() -> Weight {
		(Weight::from_ref_time(113_000_000_u64))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	// Storage: UnetAuction DutchAuctionBids (r:1 w:1)
	// Storage: UnetAuction DutchAuctions (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: OrmlNFT TokensByOwner (r:1 w:1)
	fn remove_dutch_auction() -> Weight {
		(Weight::from_ref_time(35_000_000_u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: UnetAuction BritishAuctionBids (r:1 w:1)
	// Storage: UnetAuction BritishAuctions (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: OrmlNFT TokensByOwner (r:1 w:1)
	fn remove_british_auction() -> Weight {
		(Weight::from_ref_time(35_000_000_u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: UnetConf MaxCommissionRewardRate (r:1 w:0)
	// Storage: UnetConf MinOrderDeposit (r:1 w:0)
	// Storage: OrmlNFT Tokens (r:1 w:0)
	// Storage: OrmlNFT TokensByOwner (r:1 w:1)
	// Storage: UnetConf NextId (r:1 w:1)
	// Storage: UnetAuction DutchAuctions (r:0 w:1)
	// Storage: UnetAuction DutchAuctionBids (r:0 w:1)
	fn submit_dutch_auction(c: u32, ) -> Weight {
		(Weight::from_ref_time(33_399_000_u64))			// Standard Error: 68_000
			.saturating_add((Weight::from_ref_time(10_193_000_u64)).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c as u64)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c as u64)))
	}
	// Storage: UnetConf MaxCommissionRewardRate (r:1 w:0)
	// Storage: UnetConf MinOrderDeposit (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: OrmlNFT Tokens (r:1 w:0)
	// Storage: OrmlNFT TokensByOwner (r:1 w:1)
	// Storage: UnetConf NextId (r:1 w:1)
	// Storage: UnetAuction BritishAuctions (r:0 w:1)
	// Storage: UnetAuction BritishAuctionBids (r:0 w:1)
	fn submit_british_auction(c: u32, ) -> Weight {
		(Weight::from_ref_time(30_629_000_u64))			// Standard Error: 62_000
			.saturating_add((Weight::from_ref_time(10_074_000_u64)).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c as u64)))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c as u64)))
	}
	// Storage: UnetAuction DutchAuctions (r:1 w:0)	// Storage: UnetAuction DutchAuctionBids (r:1 w:1)
	fn bid_dutch_auction() -> Weight {
		(Weight::from_ref_time(33_000_000_u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: UnetAuction BritishAuctions (r:1 w:0)	// Storage: UnetAuction BritishAuctionBids (r:1 w:1)
	fn bid_british_auction() -> Weight {
		(Weight::from_ref_time(33_000_000_u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: UnetAuction DutchAuctionBids (r:1 w:1)
	// Storage: UnetAuction DutchAuctions (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: OrmlNFT TokensByOwner (r:2 w:2)
	// Storage: UnetConf AuctionCloseDelay (r:1 w:0)
	// Storage: OrmlNFT Tokens (r:1 w:0)
	// Storage: UnetConf PlatformFeeRate (r:1 w:0)
	// Storage: OrmlNFT Classes (r:1 w:0)
	// Storage: OrmlNFT OwnersByToken (r:0 w:1)
	fn redeem_dutch_auction() -> Weight {
		(Weight::from_ref_time(115_000_000_u64))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	// Storage: UnetAuction BritishAuctionBids (r:1 w:1)
	// Storage: UnetAuction BritishAuctions (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: OrmlNFT TokensByOwner (r:2 w:2)
	// Storage: OrmlNFT Tokens (r:1 w:0)
	// Storage: UnetConf PlatformFeeRate (r:1 w:0)
	// Storage: OrmlNFT Classes (r:1 w:0)
	// Storage: OrmlNFT OwnersByToken (r:0 w:1)
	fn redeem_british_auction() -> Weight {
		(Weight::from_ref_time(113_000_000_u64))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	// Storage: UnetAuction DutchAuctionBids (r:1 w:1)	// Storage: UnetAuction DutchAuctions (r:1 w:1)	// Storage: System Account (r:1 w:1)
	// Storage: OrmlNFT TokensByOwner (r:1 w:1)
	fn remove_dutch_auction() -> Weight {
		(Weight::from_ref_time(35_000_000_u64))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	// Storage: UnetAuction BritishAuctionBids (r:1 w:1)
	// Storage: UnetAuction BritishAuctions (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: OrmlNFT TokensByOwner (r:1 w:1)
	fn remove_british_auction() -> Weight {
		(Weight::from_ref_time(35_000_000_u64))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
